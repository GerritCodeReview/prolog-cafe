# Copyright 2012 Google Inc.
#
# Prolog Cafe is free software; you can redistribute it and/or modify
# it under the terms of either:
#
#   * the GNU General Public License as published by the Free Software
#     Foundation; either version 2 of the License, or (at your option)
#     any later version, or
#
#   * the Eclipse Public License

"""Split Java source files containing multiple top-level classes.

Uses a simple heuristic based on indentation level to find top-level classes;
not guaranteed to work in the general case, but does work for source files
emitted by the Prolog Cafe compiler.
"""

__author__ = 'dborowitz@google.com (Dave Borowitz)'

import glob
import os
import re
import sys
import zipfile

CMD = os.path.basename(sys.argv[0])
HEADER_TMPL = '// Generated by %s from %%s\n' % CMD

# Treat any non-indented class definition as a top-level class, which only works
# because Prolog Cafe output is properly indented.
CLASS_RE = re.compile(r'^[a-z ]+(?:class|interface)\s+(\S+)')
PACKAGE_RE = re.compile(r'^package\s+([a-zA-Z.]+);')


def Usage():
  sys.stderr.write('Usage: %s <output.zip> <input.java>...\n' % CMD)
  return 1


def Split(infile, out_zip):
  """Split the given input file and store it in the output zip."""
  header_lines = [HEADER_TMPL % infile.name]
  package_path = None
  curr_class = None
  curr_lines = None
  stats = [0, 0]

  def Write():
    stats[1] += 1
    if package_path is None:
      raise ValueError('No package found for %s' % infile.name)
    out_zip.writestr(
        '%s/%s.java' % (package_path, curr_class),
        '%s\n%s' % ('\n'.join(header_lines), '\n'.join(curr_lines)))

  for line in infile:
    line = line.rstrip('\r\n')
    match = CLASS_RE.search(line)
    if match:
      stats[0] += 1
      if curr_class is not None:
        Write()

      curr_class = match.group(1)
      curr_lines = []

    if curr_class is not None:
      curr_lines.append(line)
    else:
      match = PACKAGE_RE.search(line)
      if match:
        package_path = match.group(1).replace('.', '/')
      header_lines.append(line)

  if curr_class is not None:
    Write()

  num_found, num_written = stats
  if num_found != num_written:
    raise AssertionError('Found %i classes but wrote %i in %s'
                         % (num_found, num_written, infile.name))


def main(argv):
  if len(argv) < 2:
    return Usage()

  out_zip = zipfile.ZipFile(argv[0], 'w', zipfile.ZIP_STORED)
  for inglob in argv[1:]:
    for filename in glob.iglob(inglob):
      with open(filename) as infile:
        Split(infile, out_zip)
  out_zip.close()

  return 0


if __name__ == '__main__':
  sys.exit(main(sys.argv[1:]))
